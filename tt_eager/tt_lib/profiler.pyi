from typing import ClassVar

class OpType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    custom_zone: ClassVar[OpType] = ...
    python_fallback: ClassVar[OpType] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def append_input_data(arg0) -> None: ...
def append_meta_data(arg0: str) -> None: ...
def append_output_data(arg0) -> None: ...
def get_profiler_flag() -> bool: ...
def set_preferred_name(arg0: str) -> None: ...
def set_profiler_location(arg0: str) -> None: ...
def start_profiling(opName: str, opType: OpType = ...) -> None: ...
def start_tracy_zone(source: str, functName: str, lineNum: int, color: int = ...) -> None: ...
def stop_profiling(arg0: str) -> None: ...
def stop_tracy_zone(name: str = ..., color: int = ...) -> bool: ...
def tracy_frame() -> None: ...
def tracy_message(message: str, color: int = ...) -> None: ...
