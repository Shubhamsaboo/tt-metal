import tt_lib.tensor
from typing import Iterator, List, overload

class CoreGrid:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def num_cores(self) -> int: ...
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...

class Shape:
    @overload
    def __init__(self, arg0: tt_lib.tensor.Shape) -> None: ...
    @overload
    def __init__(self, shape: List[int[1]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[1]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[1]], padded_shape: List[int[1]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[2]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[2]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[2]], padded_shape: List[int[2]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[3]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[3]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[3]], padded_shape: List[int[3]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[4]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[4]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[4]], padded_shape: List[int[4]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[5]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[5]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[5]], padded_shape: List[int[5]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[6]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[6]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[6]], padded_shape: List[int[6]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[7]]) -> None: ...
    @overload
    def __init__(self, shape: List[int[7]], padding: List[None]) -> None: ...
    @overload
    def __init__(self, shape: List[int[7]], padded_shape: List[int[7]]) -> None: ...
    def with_tile_padding(self) -> Shape: ...
    @overload
    def __eq__(self, arg0: Shape) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[1]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[2]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[3]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[4]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[5]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[6]]) -> bool: ...
    @overload
    def __eq__(self, arg0: List[int[7]]) -> bool: ...
    def __getitem__(self, arg0: int) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    @property
    def rank(self) -> int: ...
    @property
    def value(self) -> tt_lib.tensor.Shape: ...
