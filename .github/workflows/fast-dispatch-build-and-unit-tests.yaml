name: "[internal] Fast dispatch unit tests impl"

on:
  workflow_call:

jobs:
  python-api-ops-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # N150
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1", "issue-upgrade-800mhz-reset"]},
          # N300
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2", "issue-upgrade-800mhz-reset"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      CONFIG: ci
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: fallback-ops tests
        timeout-minutes: 120
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_unit_test_fallback_ops.sh
      - name: backward-ops tests
        timeout-minutes: 120
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_unit_test_backward_ops.sh
      - name: loss-ops tests
        timeout-minutes: 120
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_unit_test_loss_ops.sh
      - name: moreh tests
        timeout-minutes: 120
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_unit_test_moreh.sh
  python-api-misc-unit-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # N150
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1", "issue-upgrade-800mhz-reset"]},
          # N300
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2", "issue-upgrade-800mhz-reset"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      CONFIG: ci
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: misc tests
        timeout-minutes: 120
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_unit_test_misc.sh
  model-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # N150
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1", "issue-upgrade-800mhz-reset"]},
          # N300
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2", "issue-upgrade-800mhz-reset"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: Run API Model tests
        timeout-minutes: 60
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_model_tests.sh
  sweep-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # N150
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1", "issue-upgrade-800mhz-reset"]},
          # N300
          {arch: wormhole_b0, runs-on: ["arch-wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2", "issue-upgrade-800mhz-reset"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: Run API Sweep tests
        timeout-minutes: 60
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_python_sweep_tests.sh
      - name: Run tt-metal and tt-eager tests
        timeout-minutes: 60
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          env python tests/scripts/run_tt_metal.py --dispatch-mode fast
          env python tests/scripts/run_tt_eager.py --dispatch-mode fast
      - name: Run pre/post C++ regression tests
        timeout-minutes: 60
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./build/test/tt_metal/unit_tests_fast_dispatch
      - name: Build Docs
        timeout-minutes: 15
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_build_docs.sh
